country:

country_id	name
1		Canada
2		Mexico
3		Cuba
4		France
5		Spain
6		Italy
7		China

city:

city_id	country_id	name
1	6		Milan
2	6		Rome
3	7		Beijing
4	4		Nice
5	4		Paris
6	1		Toronto
7	5		Seville


These two tables both have primary keys, but the city table also has a foreign key called country_id that links to the country table. In SQL, that looks something like this:

ALTER TABLE city ADD FOREIGN KEY (country_id) REFERENCES country(country_id);

If you had this data in the database and you wanted to delete Mexico, that would be fine:

DELETE FROM country WHERE country_id = 2;

You can delete that country because nothing else relies on it. There are no cities for Mexico in the database and nothing prevents Mexico from being deleted.

However, if you tried to delete Canada with the following statement, you'd get an error:

DELETE FROM country WHERE country_id = 1;
ERROR: update or delete on table "country" violates foreign key constraint "fk_country_id" on table "city"
  Detail: Key (country_id)=(1) is still referenced from table "city".

That didn't work because you have a constraint on the city table called a Foreign Key Constraint. If any row in the city table references the row in the country table you want to delete, then that country row canâ€™t be deleted.

These constraints help you keep your data consistent and prevent you from having data that points to something that doesn't exist.



Other types of constraints

There are other types of constraints that you can put on columns in your database as well. One example is the data type that's defined on a column. But there are a few more that can help you design your database tables to make sure they never contain data that you don't want them to contain:

Constraint type				Description

UNIQUE:
	Verifies the value in this column is unique among all the rows in this table. Good for usernames and 	email address columns.

NOT NULL:
	Verifies that all rows in this table have a value for this column and the column is never set to 	NULL.

DEFAULT value:
	If a row is entered and this column isn't given a value, it gets the set default value. For example, 	DEFAULT 0.

CHECK:
	Verifies that the value in this column meets a programmer-defined condition, like AGE >= 18.

