Status codes
By default, if a handler method encounters no errors, it responds with a status code of 200, but there may be times when you want to return a different status code than the default one. For example, many REST APIs return a status code of 201 on a successful POST and a status code of 204 on a successful DELETE.

To control the status code of the response, you add the @ResponseStatus annotation. Here's a handler method for DELETE requests that responds with a status code of 204:

@ResponseStatus(HttpStatus.NO_CONTENT)
@RequestMapping(path = "/todos/{id}", method = RequestMethod.DELETE)
public void delete(@PathVariable int id) {
    int rowsAffected = todoDao.deleteTodoById(id);
    if (rowsAffected == 0) {
        throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Todo not found", null);
    }
}

There may also be times when you want to return a different status code than the default due to an error. For example, if a user wanted to get the todo with an ID of 13 and that ID wasn't in the database, you'd want to return a 404 status code.

You can do that by throwing a ResponseStatusException from your code. Its constructor accepts a parameter for the status code you want to send in the response. Additionally, you can specify a message to include in the response:

@RequestMapping(path = "/todos/{id}", method = RequestMethod.GET)
public Todo get(@PathVariable int id) {
    Todo result = todoDao.getTodoById(id);
    if (result == null) {
        // 404 Not found
        throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Todo not found", null);
    }
    return result;
}

The returned response status is 404 NOT FOUND, and the response body contains error information, including the message "Todo not found."

