Dependency injection

As applications become more complex, the number of classes and dependencies between classes increases. One of the objectives of Object-Oriented Programming is to make it easier to deal with complexity by making code modular.

You can decompose functionality into different classes that each have a specific purpose and responsibility in the system. This way, instead of needing to understand an entire system all at once, you can think about one class at a time.

For example, controller classes commonly use DAOs to store and retrieve data. Up until now, you've created instances of DAOs in a controller like this:

private TodoDao todoDao;

public TodoController() {
    todoDao = new JdbcTodoDao();
}

When a class uses, or depends on, another class, it's best to focus on what the other class is doingâ€”in other words, what service it's providing, rather than how it's doing it. While you can create a DAO in a controller this way, it ties the controller to a specific implementation. It's best to avoid doing this.

Then how can this class depend on another class without creating the object itself?

The technique for doing this is called Dependency Injection. Dependency Injection is where a framework (such as Spring) injects instances of required classes into a new object rather than the object itself creating them. This further decouples the classes from each other and allows the controller to be completely independent from any implementation of the DAO interface.