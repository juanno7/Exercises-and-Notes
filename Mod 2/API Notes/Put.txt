PUT requests
A PUT request is like a POST request, but you use the .put() method instead. You also still need to combine the Content-Type=application/json header with the object using an HttpEntity. However, you don't need to use the type parameter as you won't usually receive any data from a PUT request:

User existingUser = new User();
existingUser.setFirstName("Fredrick");
existingUser.setLastName("Smith");
existingUser.setEmail("fred@example.com");

// Create instance of RestTemplate

RestTemplate restTemplate = new RestTemplate();

// Create instance of HttpHeaders and set Content-Type to application/json

HttpHeaders headers = new HttpHeaders();
headers.setContentType(MediaType.APPLICATION_JSON);

// Combine headers with existing user object to form HttpEntity

HttpEntity<User> entity = new HttpEntity<>(existingUser, headers);

// Put (update) the existing user using the entity.

restTemplate.put(API_URL + "users/23", entity);

Notice that the URL in this example has 23 at the end of it. A PUT method updates existing data, and typically a unique identifier, such as a numerical ID, is in the URL to identify the object that you want to update.

PUT requests replace data

When performing a PUT request, you're usually expected to send the entire object, including parts that you haven't modified. This is because the server often replaces the entire object or record with the data supplied. This behavior is mainly due to the HTTP standard  , which states that a PUT request creates or replaces the existing data with the data that's sent.

It's up to the API developer to decide to follow the standard or not. As stated before, following the standard is best practice and indicates to other developers how the data changes on the server.

This behavior also explains why .put() doesn't return the updated object like .postForObject(). Since .put() assumes that the server replaces the object or record with the data supplied, there's no need to return the updated data since it's identical.

