
account_number		name		balance

383953			Bob		100.00
485920			Jane		403.00


If you want to transfer $25.00 from Bob to Jane, you'd need two statements to do that:

UPDATE account SET balance = balance - 25 WHERE account_number = 383953;
UPDATE account SET balance = balance + 25 WHERE account_number = 485920;

Most of the time this works, but what if something goes wrong? What if the database crashes right after you take $25 from Bob and the second statement throws an error? You'd be in an inconsistent state.

You want the transfer to be considered as a single action. The money is either transferred or it's not. It must never be in an in-between state. What you want is for this action to be ACID compliant. ACID is an acronym for Atomicity, Consistency, Isolation, and Durability.

The following table explains what each property means:

Atomicity:
	This means that the statements in your transaction either all happen or none of them happen.

Consistency:
	This means that your database must never be in a state where one statement has run, and the other 
	hasn't yet. In other words, all statements in the transaction happen at the same time.

Isolation:
	This means that no one else on the database sees the results of the statements until they're all 	completed.

Durable:
	This means that once the statements run, they're permanent and saved in the database.
	Most SQL databases use transactions to achieve ACID compliance.

Running statements in a transaction

You can group SQL statements together into a transaction. Instead of calling the two statements separately, like you did earlier, you can instead group them together in an ACID-compliant transaction:

BEGIN TRANSACTION;
UPDATE account SET balance = balance - 25 WHERE account_number = 383953;
UPDATE account SET balance = balance + 25 WHERE account_number = 485920;
COMMIT;

Now, the first line in your SQL call starts a new transaction. A transaction is like a temporary sandbox that you can use to manipulate the data without affecting the data for others. You're in your own world now and can change and update all you want.

If either of these statements fail, nothing from that transaction gets saved to the database, keeping the transaction atomic and consistent. Since you're in your own world, the statements are also fully isolated from anyone else on the system.

After running statements in a transaction, you then have two options. Like in the example, you can COMMIT the transaction, which applies the changes to the database all at once, or you can ROLLBACK, which discards all the changes and keeps the database as if nothing had changed.

Transactions aren't used all the time and aren't necessary for SELECT statements since nothing changes. But they're useful if you have multiple statements that must happen as one single change.


