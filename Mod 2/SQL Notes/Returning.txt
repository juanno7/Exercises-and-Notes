INSERT INTO city (country_code, name, population) VALUES ('HND', 'Tegucigalpa', 1276738);

Note that the surrogate primary key, city_id, isn't included anywhere in the INSERT statement. This is common for surrogate keys. Since their values are generated by the database system, there's no need to include them in the INSERT statement.

Then again, not including the surrogate key makes it difficult to get the newly generated value, and there are occasions when it's best to obtain the value. Perhaps the value is needed for a foreign key in another table that's part of a multi-table process.

Fortunately, all that's required to obtain the new value is adding a RETURNING clause with the name of the surrogate key column you want returned at the end of the INSERT statement. In the case of adding Tegucigalpa to Honduras, add RETURNING city_id:

INSERT INTO city (country_code, name, population)
VALUES ('HND', 'Tegucigalpa', 1276738) RETURNING city_id;


Tip: The advantages of RETURNING

There are two primary advantages to using the RETURNING clause. First, it avoids an extra database query to retrieve the value. You could always retrieve the new id for 'Tegucigalpa' after it was inserted with this:

SELECT city_id FROM city WHERE country_code = 'HND' AND name = 'Tegucigalpa';
But RETURNING city_id avoids the extra query and gives it back for free.

Second, it may be difficult to reliably retrieve the new value. Imagine you've added "Susan Smith" to a customer table with over 5,000,000 rows. How confident are you that a subsequent query for "Susan Smith" will return the row of the "Susan Smith?" RETURNING the surrogate key column resolves the ambiguity.